apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'jacoco'

// Get the MEGA SDK commit hash using Git
def getSdkGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir '../sdk/src/main/jni/mega/sdk'
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// Get the MEGAchat (Karere) commit hash using Git
def getKarereGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir '../sdk/src/main/jni/megachat/sdk'
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

/**
 * For Continuous Delivery with Firebase AppDistribution <p/>
 * For Android builds in CD pipeline, read the environment variable and
 * add to standard version name, in order to distinguish versions on Firebase.
 * For normal builds, use default version name format.
 * @return app's version name
 */
def readVersionName() {
    def versionNameTag = System.getenv('APK_VERSION_NAME_FOR_CD')
    if (versionNameTag != null && !versionNameTag.isEmpty()) {
        return "$rootProject.appVersion (${rootProject.versionCode}${versionNameTag})"
    } else {
        return "$rootProject.appVersion (${rootProject.versionCode})"
    }
}

/**
 * For Continuous Delivery with Firebase AppDistribution <p/>
 * Get release note string from environment variable.
 * @return release note to be shown on Firebase. If environment variable is not set,
 *         return "Release Note not available"
 */
def readReleaseNotes() {
    def releaseNote = System.getenv('RELEASE_NOTES_FOR_CD')
    if (releaseNote != null && !releaseNote.isEmpty()) {
        return releaseNote
    } else {
        return "Release Notes not available"
    }
}

/**
 * For Continuous Delivery with Firebase AppDistribution
 * Get tester list from environment. Tester list should be
 * comma-separated list of email address.
 * @returnn tester list or "" if there is no tester
 */
String readTesters() {
    String testers = System.getenv("TESTERS_FOR_CD")
    if (testers == null || testers.trim().isEmpty()) {
        testers = ""
    }
    return testers
}

/**
 * For Continuous Delivery with Firebase AppDistribution
 * Get tester group list from environment. Tester group list should be
 * comma-separated list of group names.
 * @return tester group list or default group list if there is no environment setting
 */
String readTesterGroupList() {
    String groups = System.getenv("TESTER_GROUP_FOR_CD")
    if (groups == null || groups.trim().isEmpty()) {
        groups = "internal_qa, internal_dev, external_qa, external_dev, internal_design"
    }
    return groups
}

/**
 * Check whether we should use prebuilt SDK or local sdk module
 *
 * @return false if environment variable "USE_PREBUILT_SDK" is false. Otherwise return true.
 */
boolean shouldUsePrebuiltSdk() {
    return false
    //FIXME uncomment this method once prebuilt sdk feature is ready
    /*String usePrebuiltSdk = System.getenv("USE_PREBUILT_SDK")
    return usePrebuiltSdk == null || usePrebuiltSdk != "false"*/
}

configurations {
    jacocoAnt
}

jacoco {
    toolVersion = "0.8.8"
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVerion

    buildFeatures {
        dataBinding = true
        viewBinding = true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion composeCompilerVersion
    }

    defaultConfig {
        applicationId "mega.privacy.android.app"

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName readVersionName()

        multiDexEnabled true
        ndk.abiFilters 'armeabi-v7a', 'x86', 'x86_64', 'arm64-v8a'

        buildConfigField("String", "USER_AGENT", "\"MEGAAndroid/${appVersion}_${versionCode}\"")
        resValue("string", "app_version", "\"${versionName}\"")
        resValue("string", "sdk_version", "\"${getSdkGitHash()}\"")
        resValue("string", "karere_version", "\"${getKarereGitHash()}\"")

        testInstrumentationRunner "test.mega.privacy.android.app.HiltTestRunner"
    }

    sourceSets {

        debug {
            res {
                srcDirs 'src/main/res'
            }
        }

        qa {
            java {
                srcDirs += 'src/qa/java'
            }
            res {
                srcDirs += 'src/qa/res'
            }
        }
    }

    packagingOptions {
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libmega.so'
        pickFirst 'lib/arm64-v8a/libjniPdfium.so'
        pickFirst 'lib/arm64-v8a/libmodpdfium.so'
        pickFirst 'lib/arm64-v8a/libmodft2.so'
        pickFirst 'lib/arm64-v8a/libmodpng.so'

        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libmega.so'
        pickFirst 'lib/armeabi-v7a/libjniPdfium.so'
        pickFirst 'lib/armeabi-v7a/libmodpdfium.so'
        pickFirst 'lib/armeabi-v7a/libmodft2.so'
        pickFirst 'lib/armeabi-v7a/libmodpng.so'

        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86/libmega.so'
        pickFirst 'lib/x86/libjniPdfium.so'
        pickFirst 'lib/x86/libmodpdfium.so'
        pickFirst 'lib/x86/libmodft2.so'
        pickFirst 'lib/x86/libmodpng.so'

        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/x86_64/libmega.so'
        pickFirst 'lib/x86_64/libjniPdfium.so'
        pickFirst 'lib/x86_64/libmodpdfium.so'
        pickFirst 'lib/x86_64/libmodft2.so'
        pickFirst 'lib/x86_64/libmodpng.so'
    }

    buildTypes {
        debug {
            debuggable true
            //  minifyEnabled false
            //   proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.enableCrashlytics = false
        }
        release {
            //  minifyEnabled false
            //  proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        qa {
            initWith debug
            debuggable true
            matchingFallbacks = ['debug', 'release']
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 11
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }

//    task megaSDK(type: Exec, description: 'Compile MEGA SDK via NDK') {
//        workingDir 'src/main/jni'
//        commandLine './build.sh', 'all'
//    }
//
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn megaSDK
//    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    flavorDimensions "service"
    productFlavors {
        gms {
            dimension "service"
            apply plugin: 'com.google.firebase.crashlytics'
            apply plugin: 'com.google.firebase.firebase-perf'
            firebaseCrashlytics {
                // Enable processing and uploading of native symbols to Crashlytics servers.
                // This flag must be enabled to see properly-symbolicated native
                // stack traces in the Crashlytics dashboard.
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir '../sdk/src/main/obj/local'
            }
            firebaseAppDistribution {
                appId = "1:268821755439:android:9b611c50c9f7a503"
                releaseNotes = readReleaseNotes()
                groups = readTesterGroupList()
                testers = readTesters()
            }
        }
        hms {
            dimension "service"
            applicationId = "mega.privacy.android.app.huawei"
            FirebasePerformance {
                // Disable @AddTrace annotation processing and automatic monitoring
                // of HTTP/S network requests for HMS build
                instrumentationEnabled false
            }
            firebaseAppDistribution {
                // This appId value comes from src/hms/google-services.json
                appId = "1:268821755439:android:fdd31226b477cf614e78da"
                releaseNotes = readReleaseNotes()
                groups = readTesterGroupList()
                testers = readTesters()
            }
        }
    }

    configurations {
        implementation.exclude module: 'protolite-well-known-types'
        implementation.exclude module: 'protobuf-javalite'

        all {
            resolutionStrategy {
                force 'androidx.test:monitor:1.4.0'
            }
        }
    }
    lint {
        checkReleaseBuilds false
    }
    lintOptions {
        abortOnError false
        xmlOutput = file("build/reports/lint-results.xml")
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation fileTree(dir: "$rootProject.projectDir/sdk/src/main/jni/ExoPlayer/", include: ['*.aar'])
    implementation project(':domain')
    implementation project(':presentation')
    implementation project(':data')

    // decide SDK dependency
    if (shouldUsePrebuiltSdk()) {
        println("[app] use remote pre-built SDK")
        implementation "nz.mega.sdk:sdk:$megaSdkVersion"
    } else {
        println("[app] use local SDK")
        implementation project(':sdk')
    }

    qaImplementation project(':screenshot')

    // App dependencies
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.cardview:cardview:$cardViewVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.recyclerview:recyclerview-selection:1.1.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "androidx.legacy:legacy-support-$legacySupportVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.viewpager2:viewpager2:$viewPagerVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"

    // Architecture Components
    implementation "androidx.fragment:fragment-ktx:$fragmentKtxVersion"

    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycleVersion"

    implementation "androidx.navigation:navigation-runtime-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    implementation "androidx.datastore:datastore-preferences:$datastoreVersion"


    implementation "androidx.preference:preference-ktx:$preferenceVersion"

    // Kotlin
    implementation "androidx.core:core-ktx:$ktxVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    implementation 'androidx.camera:camera-view:1.0.0-alpha26'
    implementation 'androidx.camera:camera-lifecycle:1.0.0'
    implementation 'androidx.preference:preference:1.2.0'
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltAndroidXCompilerVersion"
    implementation "androidx.hilt:hilt-work:$hiltAndroidXCompilerVersion"

    // Other libs
    implementation "androidx.exifinterface:exifinterface:$exifinterfaceVersion"
    implementation 'com.github.nirhart:parallaxscroll:1.0'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'com.vdurmont:emoji-java:4.0.0'
    implementation "com.google.android.exoplayer:exoplayer-core:$exoPlayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoPlayerVersion"
    implementation 'com.google.zxing:core:3.4.0'
    implementation 'com.budiyev.android:code-scanner:1.8.3'
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'
    implementation 'com.brandongogetap:stickyheaders:0.6.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.emoji:emoji-appcompat:1.1.0'
    implementation 'io.supercharge:shimmerlayout:2.1.0'
    implementation 'net.opacapp:multiline-collapsingtoolbar:27.1.1'
    implementation 'com.github.tony19:named-regexp:0.2.5'
    implementation 'org.hamcrest:hamcrest-library:1.3'
    implementation 'com.google.android:flexbox:2.0.1'
    implementation 'jp.wasabeef:blurry:2.1.0'
    implementation 'com.github.meganz.AndroidDocumentScanner:documentscanner:2.0.10'

    implementation "io.reactivex.rxjava3:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava3:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava3:rxkotlin:3.0.1"
    implementation "org.jetbrains.anko:anko-commons:$ankoVersion"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation "com.facebook.fresco:fresco:$frescoVersion"
    implementation "com.facebook.fresco:animated-gif:$frescoVersion"
    implementation "com.facebook.fresco:animated-webp:$frescoVersion"
    implementation "com.facebook.fresco:webpsupport:$frescoVersion"
    implementation "com.facebook.infer.annotation:infer-annotation:0.18.0"
    implementation files('src/main/libs/fresco-zoomable.aar')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation "com.github.zhpanvip:BannerViewPager:$bannerViewPagerVersion"

    implementation "org.jetbrains.anko:anko-commons:$ankoVersion"

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation files('../sdk/src/main/jni/megachat/webrtc/libwebrtc.jar')

    implementation "com.jeremyliao:live-event-bus-x:$liveEventBus"

    implementation "androidx.biometric:biometric:$biometricVersion"
    implementation "com.anggrayudi:storage:$simpleStorageVersion"

    // Java
    implementation "androidx.work:work-runtime:$workVersion"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$workVersion"
    // Java Code Coverage
    jacocoAnt 'org.jacoco:org.jacoco.ant:0.8.8:nodeps'

    //GMS
    gmsImplementation 'com.android.billingclient:billing:5.0.0'
    gmsImplementation 'com.google.android.gms:play-services-location:19.0.1'
    gmsImplementation 'com.google.android.gms:play-services-maps:18.0.2'
    gmsImplementation 'com.google.maps.android:android-maps-utils:0.5'
    gmsImplementation platform("com.google.firebase:firebase-bom:$firebaseBom")
    gmsImplementation 'com.google.firebase:firebase-crashlytics-ndk'
    gmsImplementation 'com.google.firebase:firebase-crashlytics-ktx'
    gmsImplementation 'com.google.firebase:firebase-messaging-ktx'
    gmsImplementation 'com.google.firebase:firebase-perf-ktx'
    //HMS
    hmsImplementation "com.huawei.agconnect:agconnect-core:$huaweiServicesVersion"
    hmsImplementation 'com.huawei.hms:push:6.1.0.300'
    hmsImplementation 'com.huawei.hms:location:6.3.0.300'
    hmsImplementation 'com.huawei.hms:maps:6.3.0.302'
    hmsImplementation 'com.huawei.hms:iap:6.3.0.300'
    hmsImplementation 'com.huawei.hms:hianalytics:6.3.2.300'
    hmsImplementation 'com.huawei.agconnect:agconnect-crash:1.6.3.300'

    // Play Core
    implementation("com.google.android.play:core:1.10.0")
    implementation("com.google.android.play:core-ktx:1.8.1")

    // protobuf-java for tombstone debug
    implementation 'com.google.protobuf:protobuf-java:3.15.3'

    // Logging
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "com.github.tony19:logback-android:$logbackVersion"
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // Compose
    implementation platform("androidx.compose:compose-bom:$composeBomVersion")
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation "androidx.compose.compiler:compiler:$composeCompilerVersion"
    implementation "androidx.activity:activity-compose:$activityComposeVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$viewModelComposeVersion"
    debugImplementation 'androidx.compose.ui:ui-tooling'

    // accompanist compose
    // pager
    implementation "com.google.accompanist:accompanist-pager:$accompanistVersion"
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanistLayoutVersion"

    // Coil Compose
    implementation "io.coil-kt:coil-compose:$coilVersion"
    implementation "io.coil-kt:coil:$coilVersion"

    // Testing dependencies
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "androidx.test.ext:truth:$androidxTestVersion"
    testImplementation "androidx.arch.core:core-testing:$androidxArchCoreVersion"
    testImplementation "androidx.test:core-ktx:$androidxTestVersion"
    testImplementation "androidx.test:core:$androidxTestVersion"
    testImplementation "org.robolectric:robolectric:$roboletricVersion"
    testImplementation "androidx.test.ext:junit-ktx:$androidxTestExtVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.mockito:mockito-inline:3.11.2"
    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    testImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'org.checkerframework', module: 'checker'
        exclude module: "protobuf-lite"
    }
    testImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineTestVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "app.cash.turbine:turbine:$turbineVersion"
    testImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'org.checkerframework', module: 'checker'
        exclude module: "protobuf-lite"
    }
    testImplementation "androidx.work:work-testing:$workVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"
    testImplementation 'androidx.compose.ui:ui-test-junit4'

    androidTestImplementation platform("androidx.compose:compose-bom:$composeBomVersion")
    androidTestImplementation "androidx.test.ext:junit:$androidxTestExtVersion"
    androidTestImplementation "com.google.truth:truth:$truthVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'org.checkerframework', module: 'checker'
        exclude module: "protobuf-lite"
    }
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'

    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hiltVersion"
    kaptTest "com.google.dagger:hilt-android-compiler:$hiltVersion"
    debugImplementation "androidx.fragment:fragment-testing:$fragmentTestingVersion"
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // Live Data testing
    testImplementation 'com.jraska.livedata:testing-ktx:1.2.0'

    //QA
    qaImplementation 'com.google.firebase:firebase-appdistribution:16.0.0-beta03'
    qaImplementation 'androidx.compose.ui:ui-test-manifest'

    implementation "com.google.auto.value:auto-value-annotations:$autovalueAnnotationVersion"
    kapt "com.google.auto.value:auto-value:$autovalueVersion"
    lintChecks project(':lint')

}

def taskRequests = gradle.getStartParameter().getTaskRequests().toString()
if (taskRequests.contains("Hms")) {
    apply plugin: 'com.huawei.agconnect'
} else {
    apply plugin: 'com.google.gms.google-services'
}


task instrumentClasses(dependsOn: 'compileGmsDebugSources') {
    def outputDir = "$buildDir.path/intermediates/classes-instrumented/gms/debug/"
    doLast {
        println 'Instrumenting classes'

        def fileFilter = [
                // data binding
                'android/databinding/**/*.class',
                '**/android/databinding/*Binding.class',
                '**/android/databinding/*',
                '**/androidx/databinding/*',
                '**/BR.*',
                // android
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                // dagger
                '**/*_MembersInjector.class',
                '**/Dagger*Component.class',
                '**/Dagger*Component$Builder.class',
                '**/Dagger*Subcomponent*.class',
                '**/*Subcomponent$Builder.class',
                '**/*Module_*Factory.class',
                '**/di/module/*',
                '**/*_Factory*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                // kotlin
                '**/*MapperImpl*.*',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/*Component*.*',
                '**/*BR*.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.*',
//                '**/*Companion*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                '**/*MembersInjector*.*',
                '**/*_MembersInjector.class',
                '**/*_Factory*.*',
                '**/*_Provide*Factory*.*',
//                '**/*Extensions*.*',
                // sealed and data classes
                '**/*$Result.*',
                '**/*$Result$*.*',
                // adapters generated by moshi
                '**/*JsonAdapter.*',
                //entity in domain layer
                '**/domain/entity/*',
                // model in data layer
                '**/data/model/*',
        ]
        def excludesPattern = String.join(" ", fileFilter)

        ant.taskdef(name: 'instrument',
                classname: 'org.jacoco.ant.InstrumentTask',
                classpath: configurations.jacocoAnt.asPath)
        ant.instrument(destdir: outputDir) {
            fileset(dir: "$buildDir.path/intermediates/javac/gmsDebug/classes",
                    excludes: excludesPattern)
            fileset(dir: "$buildDir.path/tmp/kotlin-classes/gmsDebug",
                    excludes: excludesPattern)
        }

        /* Add the instrumented classes to the beginning of classpath */
        testGmsDebugUnitTest.classpath = files(outputDir) + testGmsDebugUnitTest.classpath
    }
}

task createUnitTestCoverageReport(dependsOn: ['instrumentClasses', 'testGmsDebugUnitTest']) {
    doLast {
        ant.taskdef(name: 'report',
                classname: 'org.jacoco.ant.ReportTask',
                classpath: configurations.jacocoAnt.asPath)
        ant.report() {
            executiondata {
                ant.file(file: "$buildDir.path/jacoco/testGmsDebugUnitTest.exec")
            }
            structure(name: 'Coverage') {
                classfiles {
                    fileset(dir: "$buildDir.path/intermediates/javac/gmsDebug/classes")
                    fileset(dir: "$buildDir.path/tmp/kotlin-classes/gmsDebug")
                }
                sourcefiles {
                    fileset(dir: 'src/main/java')
                    fileset(dir: 'src/test/java')
//                    fileset(dir: 'src/testDebug/java')
                }
            }
            html(destdir: "$buildDir.path/reports/jacoco/html")
            csv(destfile: "$buildDir.path/reports/jacoco/gmsDebugUnitTestCoverage.csv")
        }
    }
}