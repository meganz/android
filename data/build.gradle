plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

apply plugin: 'jacoco'
apply from: "$project.rootDir/tools/jacoco.gradle"

/**
 * Check whether we should use prebuilt SDK or local sdk module
 *
 * @return false if environment variable "USE_PREBUILT_SDK" is false. Otherwise return true.
 */
boolean shouldUsePrebuiltSdk() {
    return false
    //FIXME uncomment this method once prebuilt sdk feature is ready
    /*String usePrebuiltSdk = System.getenv("USE_PREBUILT_SDK")
    return usePrebuiltSdk == null || usePrebuiltSdk != "false"*/
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVerion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        resValue("string", "app_version", "\"${versionName}\"")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }

    lint {
        abortOnError false
        xmlOutput = file("build/reports/lint-results.xml")
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }

    flavorDimensions "service"
    productFlavors {
        gms {
            dimension "service"
        }
        hms {
            dimension "service"
        }
    }
}

dependencies {
    implementation project(':domain')

    if (shouldUsePrebuiltSdk()) {
        println("[data] use remote pre-built SDK")
        implementation "nz.mega.sdk:sdk:$megaSdkVersion"
    } else {
        println("[data] use local SDK")
        implementation project(':sdk')
    }

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"

    kapt "androidx.hilt:hilt-compiler:$hiltAndroidXCompilerVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    implementation "androidx.exifinterface:exifinterface:$exifinterfaceVersion"
    implementation "androidx.datastore:datastore-preferences:$datastoreVersion"
    implementation "androidx.preference:preference-ktx:$preferenceVersion"

    // Logging
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "com.github.tony19:logback-android:$logbackVersion"
    implementation "com.jakewharton.timber:timber:$timberVersion"

    implementation "com.google.auto.value:auto-value-annotations:$autovalueAnnotationVersion"
    kapt "com.google.auto.value:auto-value:$autovalueVersion"

    // Testing dependencies
    androidTestImplementation "androidx.test.ext:junit:$androidxTestExtVersion"
    androidTestImplementation "com.google.truth:truth:$truthVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"
    androidTestImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineTestVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "androidx.test.ext:truth:$androidxTestVersion"
    testImplementation "androidx.test:core-ktx:$androidxTestVersion"
    testImplementation "androidx.test:core:$androidxTestVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "app.cash.turbine:turbine:$turbineVersion"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineTestVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
}

