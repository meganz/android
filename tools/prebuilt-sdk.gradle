import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

// Setting this property to true will make the artifactoryPublish task
// skip this module (in our case, the root module):
artifactoryPublish.skip = true

/**
 * Generate the SDK version string. This version is used in the published SDK library and
 * is used by library users.
 * Note: the sdk version is in the pattern of yyyyMMdd.HHmmss and is formatted to UTC,
 * not local time.
 *
 * @return SDK lib's version
 */
String sdkVersion() {
    OffsetDateTime now = OffsetDateTime.now(ZoneOffset.UTC)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd.HHmmss")
    return now.format(formatter)
}

/**
 * Get the library type from environment.
 *
 * @return If environment variable SDK_PUBLISH_TYPE exists with value "rel", then
 * return "rel". Otherwise return "dev".
 */
String sdkLibType() {
    String type = System.getenv("SDK_PUBLISH_TYPE")
    if (type == "rel") {
        return "rel"
    } else {
        return "dev"
    }
}

def getEnvironmentVariable = { param ->
    def value = System.getenv(param)
    if (value == null || value.isEmpty()) {
        return "N/A"
    } else {
        return value
    }
}

def SDK_COMMIT = getEnvironmentVariable("SDK_COMMIT")
def CHAT_COMMIT = getEnvironmentVariable("CHAT_COMMIT")
def SDK_BUILDER_NAME = getEnvironmentVariable("gitlabUserName")

println("SDK_COMMIT = $SDK_COMMIT")
println("CHAT_COMMIT = $CHAT_COMMIT")
println("SDK_BUILDER_NAME = $SDK_BUILDER_NAME")

project('sdk') {
    artifactoryPublish.dependsOn('build')
    publishing {
        publications {
            aar(MavenPublication) {
                groupId = 'nz.mega.sdk'
                artifactId = 'sdk'
                version = sdkVersion() + "-" + sdkLibType()
                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.aar)
    }
}

artifactory {
    clientConfig.setIncludeEnvVars(true)

    contextUrl = "https://artifactory.developers.mega.co.nz/artifactory/mega-gradle"
    publish {
        repository {
            repoKey = "mega-sdk-android" // The Artifactory repository key to publish to
            username = "${System.env.ARTIFACTORY_USER}" // The publisher user name
            password = "${System.env.ARTIFACTORY_ACCESS_TOKEN}" // The publisher password
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            properties = [
                    'sdk-commit' : "$SDK_COMMIT",
                    'chat-commit': "$CHAT_COMMIT",
                    'builder': "$SDK_BUILDER_NAME"
            ]
            publishPom = true // Publish generated POM files to Artifactory (true by default)
        }
    }
}